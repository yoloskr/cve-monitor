package source

import (
    "log"
    "net/http"
    "io/ioutil"
    "encoding/json"
)

type Repositories struct {
    Total_count int          `json:"total_count"`
    Incomplete_results bool  `json:"incomplete_results"`
    Items []RepositoriesItem `json:"items"`
}

type RepositoriesItem struct {
    Id int             `json:"id"`
    Name string        `json:"name"`
    Full_name string   `json:"full_name"`
    Description string `json:"description"`
    Svn_url string     `json:"svn_url"`
}


type GitHubSource struct {
    TotalCount int 
    HasNewMsg  bool
    NewMsg     RepositoriesItem
    Api_url    string
}


func (gs *GitHubSource) Refresh() {
    var Repo Repositories
    resp, err := http.Get(gs.Api_url)
    if err != nil {
        log.Fatal("github fetch error")
    }
   
    defer resp.Body.Close()

    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        log.Fatal("data read error")
    }
    if err := json.Unmarshal([]byte(body), &Repo); err == nil {
        latest := Repo.Items[0]
        log.Println(latest.Svn_url, Repo.Total_count, gs.TotalCount)
        if gs.TotalCount == 0 {
            gs.TotalCount = Repo.Total_count
        } else if gs.TotalCount != Repo.Total_count {
            gs.TotalCount = Repo.Total_count
            gs.HasNewMsg = true
            gs.NewMsg = latest     
        }
    }  else {
        log.Fatal(err)
    }
}

func (gs *GitHubSource) CheckNewMsg() (has bool) {
    return gs.HasNewMsg
}

func (gs *GitHubSource) SetHasNewMsg(flag bool) {
    gs.HasNewMsg = flag
}

func (gs *GitHubSource) GetNewMsg() (Msg RepositoriesItem) {
    return gs.NewMsg
}
