package models

import (
    "log"
    "cve.monitor/channel"
    "cve.monitor/source"
    "time"
)

type Monitor struct {
    Conf *Config
    NewMsg chan source.RepositoriesItem
}

func (m *Monitor) Run() {
    m.yamlCheck()
    api_url := m.Conf.Github.Repos_api + "?q=" +m.Conf.Github.Query + "&sort=updated&order=desc"
    githubSource := source.GitHubSource{0, false, source.RepositoriesItem{}, api_url}
    log.Println("start github cve monitor ...")    
    go m.SendNotice()
    for {
        githubSource.Refresh()
        b := githubSource.CheckNewMsg() 
        if b {
            githubSource.SetHasNewMsg(false)
            m.NewMsg <- githubSource.GetNewMsg()
           
        }  
        time.Sleep(time.Duration(m.Conf.Period)*time.Second)
    }
}

func (m *Monitor)SendNotice() {
     for {
         msg := <- m.NewMsg
         channel.SendMail(m.Conf.Mail.From, 
                          m.Conf.Mail.To,
                          m.Conf.Mail.Host,
                          m.Conf.Mail.Port,
                          m.Conf.Mail.Username,
                          m.Conf.Mail.Password,
                          msg.Svn_url)
    }   
}