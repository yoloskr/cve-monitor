package models

import (
  "fmt"
  "log"
  "time"

  "cve.monitor/channel"
  "cve.monitor/source"
)

type Monitor struct {
  Conf   *Config
  NewMsg chan source.RepositoriesItem
}

var Period = 300

func (m *Monitor) Run() {
  showBanner()
  m.yamlCheck()
  api_url := m.Conf.Github.Repos_api + "?q=" + m.Conf.Github.Query + "&sort=updated&order=desc"
  githubSource := source.GitHubSource{0, false, source.RepositoriesItem{}, api_url}
  log.Println("start github cve monitor ...")
  go m.SendNotice()
  if m.Conf.Period != 0 {
    Period = m.Conf.Period
  }
  ticker := time.NewTicker(time.Second * time.Duration(Period))
  defer ticker.Stop()
  for {
    if err := githubSource.Refresh(); err != nil {
      fmt.Printf("warnning:%s\n", err)
    }
    HasNewMsg := githubSource.CheckNewMsg()
    if HasNewMsg {
      githubSource.SetHasNewMsg(false)
      NewMsg := githubSource.GetNewMsg()
      fmt.Printf("Found a new cve repository, name:%s\n", NewMsg.Name)
      m.NewMsg <- NewMsg
    }
    <-ticker.C
  }
}

func (m *Monitor) SendNotice() {
  for {
    msg := <-m.NewMsg
    channel.SendMail(m.Conf.Mail.From,
      m.Conf.Mail.To,
      m.Conf.Mail.Host,
      m.Conf.Mail.Port,
      m.Conf.Mail.Username,
      m.Conf.Mail.Password,
      msg.Svn_url)
  }
}
